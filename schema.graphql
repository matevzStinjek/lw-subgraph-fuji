type Project @entity {
    id: ID!
    createdTimestamp: Int!
    lostWorlds: [LostWorld!]! @derivedFrom(field: "project")
}

type LostWorld @entity {
    id: ID!
    type: String!

    # FlatRandomLostWorld
    price: BigInt

    # CurvedRandomLostWorld
    priceRanges: [PriceRange!]! @derivedFrom(field: "lostWorld")

    # general
    name: String
    totalSupply: BigInt
    maxSupply: BigInt
    createdTimestamp: Int

    # context
    project: Project
    detached: Boolean

    # metadata
    location: String
    lat: BigDecimal
    long: BigDecimal
    radius: BigInt

    variations: [Variation!]! @derivedFrom(field: "lostWorld")

    tokens: [Token!]! @derivedFrom(field: "lostWorld")
    orders: [Order!]! @derivedFrom(field: "lostWorld")
}

# type User @entity {
#     id: ID!
#     tokens
#     sellOrders
#     boughtOrders
#     fromTransactions
#     toTransactions
#     totalClaimed
# }

type Token @entity {
    id: ID!
    tokenID: BigInt!
    lostWorld: LostWorld!
    variation: Variation!
    minter: Bytes!
    createdTimestamp: Int!

    # tokenURI
    name: String!
    minterLat: BigDecimal!
    minterLong: BigDecimal!
    image: String!

    # mutables
    owner: Bytes!
    updatedTimestamp: Int!
    transactions: [TokenTransaction!]! @derivedFrom(field: "token")
    orders: [Order!]! @derivedFrom(field: "token")
    activeOrder: Order
    hasActiveOrder: Boolean!
}

type TokenTransaction @entity {
    id: ID!
    from: Bytes!
    to: Bytes!
    token: Token!
    variation: Variation!
    lostWorld: LostWorld!
    timestamp: Int!
}

type Order @entity {
    id: ID! # prefix + orderId
    orderId: BigInt!
    marketplace: String!

    token: Token!
    variation: Variation!
    lostWorld: LostWorld!

    # variables
    price: BigInt!
    seller: Bytes!
    buyer: Bytes

    # flags
    isOpen: Boolean!
    isExecuted: Boolean!

    # timestamps
    createdTimestamp: Int!
    updatedTimestamp: Int!
}

type PriceRange @entity {
    id: ID!
    threshold: BigInt!
    price: BigInt!
    lostWorld: LostWorld!
}

type Variation @entity {
    id: ID!
    internalId: BigInt!
    name: String!
    totalSupply: BigInt!
    maxSupply: BigInt!
    issuer: String!
    image: String!
    lostWorld: LostWorld!
    orders: [Order!]! @derivedFrom(field: "variation")
}

type Achievement @entity {
    id: ID!
    name: String
    description: String
    image: String
    stakeCondition: BigInt
    lostReward: BigInt
    badges: [Badge!]! @derivedFrom(field: "achievement")
}

type Badge @entity {
    id: ID!
    achievement: Achievement!
    tokenID: BigInt!
    owner: Bytes!
    name: String!
    description: String!
    achievedAt: Int!
    image: String!
}
